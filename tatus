[33mcommit 03f3364751f6097a070da4b02c983abfea821966[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m, [m[1;31morigin/master[m[33m)[m
Author: Ronymark <ronymark7000@gmail.com>
Date:   Mon Nov 6 15:13:43 2023 +0545

    Second Version of the Online Book Store Code

[1mdiff --git a/pom.xml b/pom.xml[m
[1mindex 2af1cc4..280be8e 100644[m
[1m--- a/pom.xml[m
[1m+++ b/pom.xml[m
[36m@@ -55,6 +55,12 @@[m
 			<groupId>org.springframework.boot</groupId>[m
 			<artifactId>spring-boot-starter-validation</artifactId>[m
 		</dependency>[m
[32m+[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-thymeleaf</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m
 	</dependencies>[m
 [m
 	<build>[m
[1mdiff --git a/src/main/java/com/intern/OnlineBookStore/dto/UserDto.java b/src/main/java/com/intern/OnlineBookStore/dto/UserDto.java[m
[1mindex 5842a71..4ac82f9 100644[m
[1m--- a/src/main/java/com/intern/OnlineBookStore/dto/UserDto.java[m
[1m+++ b/src/main/java/com/intern/OnlineBookStore/dto/UserDto.java[m
[36m@@ -1,24 +1,19 @@[m
 package com.intern.OnlineBookStore.dto;[m
 [m
[32m+[m[32mimport jakarta.persistence.criteria.CriteriaBuilder;[m
[32m+[m[32mimport lombok.AllArgsConstructor;[m
 import lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
 [m
 @Data[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32m@NoArgsConstructor[m
 public class UserDto {[m
[31m-[m
[32m+[m[32m    private Integer userId;[m
     private String username;[m
     private String email;[m
[32m+[m[32m    private String password;[m
     private String role;[m
 [m
[31m-    //Used instead of @NoArgsConstructor[m
[31m-    public UserDto() {[m
[31m-    }[m
[31m-[m
[31m-    //Used instead of @AllArgsConstructor[m
[31m-[m
[31m-    public UserDto(String username, String email, String role) {[m
[31m-        this.username = username;[m
[31m-        this.email = email;[m
[31m-        this.role = role;[m
[31m-    }[m
 }[m
 [m
[1mdiff --git a/src/main/java/com/intern/OnlineBookStore/model/User.java b/src/main/java/com/intern/OnlineBookStore/model/User.java[m
[1mindex 24dd5d6..5761df4 100644[m
[1m--- a/src/main/java/com/intern/OnlineBookStore/model/User.java[m
[1m+++ b/src/main/java/com/intern/OnlineBookStore/model/User.java[m
[36m@@ -35,7 +35,6 @@[m [mpublic class User {[m
 [m
     @Column(nullable = false, length = 10)[m
     @NotBlank(message = "Role is mandatory")[m
[31m-    @Pattern(regexp = "^(student|teach)$" ,message = "Roles are invalid")[m
     private String role;[m
 }[m
 [m
[1mdiff --git a/src/main/java/com/intern/OnlineBookStore/service/UserServiceImpl.java b/src/main/java/com/intern/OnlineBookStore/service/UserServiceImpl.java[m
[1mindex 4dcbe3c..0f09d58 100644[m
[1m--- a/src/main/java/com/intern/OnlineBookStore/service/UserServiceImpl.java[m
[1m+++ b/src/main/java/com/intern/OnlineBookStore/service/UserServiceImpl.java[m
[36m@@ -35,7 +35,7 @@[m [mpublic class UserServiceImpl implements UserService {[m
         Optional<User> optionalUser = userRepo.findById(userId);[m
 [m
         User user = optionalUser.get();[m
[31m-        UserDto userDtos = new UserDto(user.getUsername(), user.getEmail(), user.getRole());[m
[32m+[m[32m        UserDto userDtos = new UserDto(user.getUserId(),user.getUsername(), user.getEmail(), user.getPassword(),user.getRole());[m
 [m
         return userDtos;[m
     }[m
[1mdiff --git a/src/main/java/com/intern/OnlineBookStore/userInterface/uiController.java b/src/main/java/com/intern/OnlineBookStore/userInterface/uiController.java[m
[1mnew file mode 100644[m
[1mindex 0000000..2f9b476[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/intern/OnlineBookStore/userInterface/uiController.java[m
[36m@@ -0,0 +1,88 @@[m
[32m+[m[32mpackage com.intern.OnlineBookStore.userInterface;[m
[32m+[m
[32m+[m[32mimport com.intern.OnlineBookStore.dto.UserDto;[m
[32m+[m[32mimport com.intern.OnlineBookStore.model.User;[m
[32m+[m[32mimport com.intern.OnlineBookStore.service.UserService;[m
[32m+[m[32mimport jakarta.validation.Valid;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.stereotype.Controller;[m
[32m+[m[32mimport org.springframework.ui.Model;[m
[32m+[m[32mimport org.springframework.validation.BindingResult;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.*;[m
[32m+[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@Controller[m
[32m+[m[32mpublic class uiController {[m
[32m+[m
[32m+[m[32m        @Autowired[m
[32m+[m[32m        private UserService userService;[m
[32m+[m
[32m+[m[32m        public uiController(UserService userService) {[m
[32m+[m[32m            this.userService = userService;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        @GetMapping("/allUsers")[m
[32m+[m[32m        public String getAllUsers(Model model) {[m
[32m+[m[32m            List<UserDto> user = userService.getAllUsers();[m
[32m+[m[32m            model.addAttribute("user", user);[m
[32m+[m[32m            return "listUser";[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m//        @GetMapping("/user/{userId}")[m
[32m+[m[32m//        private ResponseEntity<ResponseWrapper> getUserById(@PathVariable("userId") int userId) {[m
[32m+[m[32m//[m
[32m+[m[32m//            UserDto user = userService.getUserById(userId);[m
[32m+[m[32m//            if (user != null) {[m
[32m+[m[32m//                ResponseWrapper response = new ResponseWrapper();[m
[32m+[m[32m//                response.setStatusCode(HttpStatus.OK.value());[m
[32m+[m[32m//                response.setMessage("Users retrieved successfully by ID");[m
[32m+[m[32m//                response.setResponse(userService.getUserById(userId));[m
[32m+[m[32m//                return ResponseEntity.ok(response);[m
[32m+[m[32m//            } else {[m
[32m+[m[32m//                ResponseWrapper response = new ResponseWrapper();[m
[32m+[m[32m//                response.setStatusCode(HttpStatus.NOT_FOUND.value());[m
[32m+[m[32m//                response.setMessage("User not found...Please Check Again");[m
[32m+[m[32m//                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);[m
[32m+[m[32m//            }[m
[32m+[m[32m//        }[m
[32m+[m[32m//[m
[32m+[m[32m        @GetMapping("/addUser")[m
[32m+[m[32m        public String createUser(Model model){[m
[32m+[m[32m            User user = new User();[m
[32m+[m[32m            model.addAttribute("user",user);[m
[32m+[m[32m            return "addUser";[m
[32m+[m[32m        }[m
[32m+[m[32m        @PostMapping("/save")[m
[32m+[m[32m        public String saveUser(@Valid @ModelAttribute ("user")User user, BindingResult result){[m
[32m+[m[32m            if (result.hasErrors()){[m
[32m+[m[32m                return "addUser";[m
[32m+[m[32m            }[m
[32m+[m[32m            userService.createUser(user);[m
[32m+[m[32m            return "redirect:/allUsers";[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        @GetMapping("/update/{id}")[m
[32m+[m[32m        public String updateUser(@Valid @PathVariable ("id")int userId, Model model){[m
[32m+[m[32m            UserDto user = userService.getUserById(userId);[m
[32m+[m[32m            model.addAttribute("user",user);[m
[32m+[m[32m            return "updateUser";[m
[32m+[m[32m        }[m
[32m+[m[32m        @PostMapping("/update/{id}")[m
[32m+[m[32m        public String update(@PathVariable("id")int userId,@Valid @ModelAttribute ("user")User user, BindingResult result){[m
[32m+[m[32m            if (result.hasErrors()){[m
[32m+[m[32m                return "updateUser";[m
[32m+[m[32m            }[m
[32m+[m[32m            userService.updateUser(userId, user);[m
[32m+[m[32m            return "redirect:/allUsers";[m
[32m+[m[32m        }[m
[32m+[m
[32m